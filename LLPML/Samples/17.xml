<?xml version="1.0" encoding="utf-8" ?>
<llpml version="0.5.20070819" subsystem="WINDOWS_GUI">

<!-- window -->

<extern name="GetModuleHandle" alias="GetModuleHandleW" module="kernel32.dll" type="std" />
<extern name="Sleep" module="kernel32.dll" type="std" />
<extern name="DefWindowProc" alias="DefWindowProcW" module="user32.dll" type="std" />
<extern name="LoadCursor" alias="LoadCursorW" module="user32.dll" type="std" />
<extern name="RegisterClassEx" alias="RegisterClassExW" module="user32.dll" type="std" />
<extern name="CreateWindowEx" alias="CreateWindowExW" module="user32.dll" type="std" />
<extern name="ShowWindow" module="user32.dll" type="std" />
<extern name="UpdateWindow" module="user32.dll" type="std" />
<extern name="DestroyWindow" module="user32.dll" type="std" />
<extern name="GetMessage" alias="GetMessageW" module="user32.dll" type="std" />
<extern name="TranslateMessage" module="user32.dll" type="std" />
<extern name="DispatchMessage" alias="DispatchMessageW" module="user32.dll" type="std" />
<extern name="PostQuitMessage" module="user32.dll" type="std" />

<int-declare name="CS_VREDRAW">1</int-declare>
<int-declare name="CS_HREDRAW">2</int-declare>
<int-declare name="COLOR_WINDOW">5</int-declare>
<int-declare name="IDC_ARROW">32512</int-declare>
<int-declare name="CW_USEDEFAULT">0x80000000</int-declare>
<int-declare name="WS_OVERLAPPED">0</int-declare>
<int-declare name="WS_CAPTION">0xc00000</int-declare>
<int-declare name="WS_SYSMENU">0x80000</int-declare>
<int-declare name="WS_THICKFRAME">0x40000</int-declare>
<int-declare name="WS_MINIMIZEBOX">0x20000</int-declare>
<int-declare name="WS_MAXIMIZEBOX">0x10000</int-declare>
<var-int-declare name="WS_OVERLAPPEDWINDOW">
	<or>
		<int name="WS_OVERLAPPED" />
		<int name="WS_CAPTION" />
		<int name="WS_SYSMENU" />
		<int name="WS_THICKFRAME" />
		<int name="WS_MINIMIZEBOX" />
		<int name="WS_MAXIMIZEBOX" />
	</or>
</var-int-declare>
<int-declare name="SW_SHOWNORMAL">1</int-declare>
<int-declare name="WM_DESTROY">2</int-declare>

<struct-define name="WNDCLASSEX">
	<member name="cbSize" />
	<member name="style" />
	<member name="lpfnWndProc" />
	<member name="cbClsExtra" />
	<member name="cbWndExtra" />
	<member name="hInstance" />
	<member name="hIcon" />
	<member name="hCursor" />
	<member name="hbrBackground" />
	<member name="lpszMenuName" />
	<member name="lpszClassName" />
	<member name="hIconSm" />
</struct-define>

<struct-define name="MSG">
	<member name="hwnd" />
	<member name="message" />
	<member name="wParam" />
	<member name="lParam" />
	<member name="time" />
	<member name="pt.x" />
	<member name="pt.y" />
</struct-define>

<string-declare name="className">LLPML Test Window</string-declare>

<var-int-declare name="hInst">
	<call name="GetModuleHandle" />
</var-int-declare>

<struct-declare name="wcex" type="WNDCLASSEX">
	<!-- cbSize        --> <struct-size name="WNDCLASSEX" />
	<!-- style         --> <or><int name="CS_VREDRAW" /><int name="CS_HREDRAW" /></or>
	<!-- lpfnWndProc   --> <function-ptr name="WndProc" />
	<!-- cbClsExtra    --> <int>0</int>
	<!-- cbWndExtra    --> <int>0</int>
	<!-- hInstance     --> <var-int name="hInst" />
	<!-- hIcon         --> <int>0</int>
	<!-- hCursor       --> <call name="LoadCursor"><int>0</int><int name="IDC_ARROW" /></call>
	<!-- hbrBackground --> <add><int name="COLOR_WINDOW" /><int>1</int></add>
	<!-- lpszMenuName  --> <int>0</int>
	<!-- lpszClassName --> <string name="className" />
	<!-- hIconSm       --> <int>0</int>
</struct-declare>

<call name="RegisterClassEx">
	<ptr name="wcex" />
</call>

<var-int-declare name="hWnd">
	<call name="CreateWindowEx">
		<!-- dwExStyle    --> <int>0</int>
		<!-- lpClassName  --> <string name="className" />
		<!-- lpWindowName --> <string>テスト</string>
		<!-- dwStyle      --> <var-int name="WS_OVERLAPPEDWINDOW" />
		<!-- X            --> <int name="CW_USEDEFAULT" />
		<!-- Y            --> <int>0</int>
		<!-- nWidth       --> <int>256</int>
		<!-- nHeight      --> <int>256</int>
		<!-- hWndParent   --> <int>0</int>
		<!-- hMenu        --> <int>0</int>
		<!-- hInstance    --> <var-int name="hInst" />
		<!-- lpParam      --> <int>0</int>
	</call>
</var-int-declare>

<call name="ShowWindow">
	<var-int name="hWnd" />
	<int name="SW_SHOWNORMAL" />
</call>

<call name="UpdateWindow">
	<var-int name="hWnd" />
</call>

<struct-declare name="msg" type="MSG" />

<while>
	<cond>
		<call name="GetMessage">
			<ptr name="msg" />
			<int>0</int>
			<int>0</int>
			<int>0</int>
		</call>
	</cond>
	<block>
		<call name="TranslateMessage">
			<ptr name="msg" />
		</call>
		<call name="DispatchMessage">
			<ptr name="msg" />
		</call>
	</block>
</while>

<call name="DestroyWindow">
	<var-int name="hWnd" />
</call>

<function name="WndProc" type="std">
	<arg-int name="hwnd" />
	<arg-int name="msg" />
	<arg-int name="wParam" />
	<arg-int name="lParam" />
	<var-int-declare name="ret">0</var-int-declare>
	<switch>
		<expr>
			<var-int name="msg" />
		</expr>
		<case><int name="WM_DESTROY" /></case>
		<block>
			<call name="PostQuitMessage">
				<int>0</int>
			</call>
		</block>
		<block>
			<let>
				<var-int name="ret" />
				<call name="DefWindowProc">
					<var-int name="hwnd" />
					<var-int name="msg" />
					<var-int name="wParam" />
					<var-int name="lParam" />
				</call>
			</let>
		</block>
	</switch>
	<return>
		<var-int name="ret" />
	</return>
</function>

</llpml>
