/// 配列

_Finish _finish;

var a[16];
printfln("var a[16]");
printfln("sizeof(a) = %d", sizeof(a));
printfln("a = %p", a);
printfln("addrof(a[ 0]) = %p", addrof(a[ 0]));
printfln("addrof(a[ 1]) = %p", addrof(a[ 1]));
printfln("addrof(a[14]) = %p", addrof(a[14]));
printfln("addrof(a[15]) = %p", addrof(a[15]));
for (var i = 0; i < 4; i++) a[i] = i * i;
vprintfln("a = { %d, %d, %d, %d, ... }", a);
println();

byte b[16];
printfln("byte b[16]");
printfln("sizeof(b) = %d", sizeof(b));
printfln("b = %p", b);
printfln("addrof(b[ 0]) = %p", addrof(b[ 0]));
printfln("addrof(b[ 1]) = %p", addrof(b[ 1]));
printfln("addrof(b[14]) = %p", addrof(b[14]));
printfln("addrof(b[15]) = %p", addrof(b[15]));
println();

char c[16];
printfln("char c[16]");
printfln("sizeof(c) = %d", sizeof(c));
printfln("c = %p", c);
printfln("addrof(c[ 0]) = %p", addrof(c[ 0]));
printfln("addrof(c[ 1]) = %p", addrof(c[ 1]));
printfln("addrof(c[14]) = %p", addrof(c[14]));
printfln("addrof(c[15]) = %p", addrof(c[15]));
println();

struct Test1
{
  var a, b;
  
  function Show(n)
  {
    printfln("%d: %p [%s] a = %d, b = %d",
      n, this, __FUNCTION__, a, b);
  }
}
printfln("struct Test1 { var a, b; }");
Test1 t1[16];
printfln("Test1 t1[16]");
printfln("sizeof(Test1) = %d", sizeof(Test1));
printfln("sizeof(t1) = %d", sizeof(t1));
printfln("t1 = %p", t1);
printfln("addrof(t1[ 0]  ) = %p", addrof(t1[ 0]  ));
printfln("addrof(t1[ 0].a) = %p", addrof(t1[ 0].a));
printfln("addrof(t1[ 0].b) = %p", addrof(t1[ 0].b));
printfln("addrof(t1[ 1]  ) = %p", addrof(t1[ 1]  ));
printfln("addrof(t1[ 1].a) = %p", addrof(t1[ 1].a));
printfln("addrof(t1[ 1].b) = %p", addrof(t1[ 1].b));
printfln("addrof(t1[14]  ) = %p", addrof(t1[14]  ));
printfln("addrof(t1[14].a) = %p", addrof(t1[14].a));
printfln("addrof(t1[14].b) = %p", addrof(t1[14].b));
printfln("addrof(t1[15]  ) = %p", addrof(t1[15]  ));
printfln("addrof(t1[15].a) = %p", addrof(t1[15].a));
printfln("addrof(t1[15].b) = %p", addrof(t1[15].b));
for (var i = 0; i < 4; i++)
{
  t1[i].a = i * 10;
  t1[i].b = i * 10 + 1;
  t1[i].Show(i);
}
vprintfln("t1 = { { %d, %d }, { %d, %d }, ... }", t1);
println();

//var p : Test1* = t1;
var p = t1; // 型推論
printfln("p = %p", p);
p[1].Show(1);
p[1].a = 5;
p[1].b = 7;
p[1].Show(1);
println();

struct Test2
{
  var a[2];
  
  function Show(n)
  {
    printfln("%d: %p [%s] a = { %d, %d }",
      n, this, __FUNCTION__, a[0], a[1]);
  }
}
printfln("struct Test2 { var a[2]; }");
Test2 t2[16];
printfln("Test2 t2[16]");
printfln("sizeof(Test2) = %d", sizeof(Test2));
printfln("sizeof(t2) = %d", sizeof(t2));
printfln("t2 = %p", t2);
printfln("addrof(t2[ 0]     ) = %p", addrof(t2[ 0]     ));
printfln("addrof(t2[ 0].a   ) = %p", addrof(t2[ 0].a   ));
printfln("addrof(t2[ 0].a[0]) = %p", addrof(t2[ 0].a[0]));
printfln("addrof(t2[ 0].a[1]) = %p", addrof(t2[ 0].a[1]));
printfln("addrof(t2[ 1]     ) = %p", addrof(t2[ 1]     ));
printfln("addrof(t2[ 1].a   ) = %p", addrof(t2[ 1].a   ));
printfln("addrof(t2[ 1].a[0]) = %p", addrof(t2[ 1].a[0]));
printfln("addrof(t2[ 1].a[1]) = %p", addrof(t2[ 1].a[1]));
printfln("addrof(t2[14]     ) = %p", addrof(t2[14]     ));
printfln("addrof(t2[14].a   ) = %p", addrof(t2[14].a   ));
printfln("addrof(t2[14].a[0]) = %p", addrof(t2[14].a[0]));
printfln("addrof(t2[14].a[1]) = %p", addrof(t2[14].a[1]));
printfln("addrof(t2[15]     ) = %p", addrof(t2[15]     ));
printfln("addrof(t2[15].a   ) = %p", addrof(t2[15].a   ));
printfln("addrof(t2[15].a[0]) = %p", addrof(t2[15].a[0]));
printfln("addrof(t2[15].a[1]) = %p", addrof(t2[15].a[1]));
for (var i = 0; i < 16; i++)
{
  t2[i].a[0] = i * 100;
  t2[i].a[1] = i * 100 + 10;
}
test(t2, 16);
vprintfln("t2 = { { %d, %d }, { %d, %d }, ... }", t2);

function test(array : Test2*, count)
{
  for (var i = 0; i < count; i++)
    array[i].Show(i);
}
