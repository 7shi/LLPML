extern "kernel32.dll" __stdcall
{
	GetStdHandle(nStdHandle);
	lstrlenA(lpString : byte*);
	WriteFile(handle, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, lpOverlapped);
	ReadFile(handle, lpBuffer, nNumberOfBytesToRead, lpNumberOfBytesRead, lpOverlapped);
}
extern "kernel32.dll" __stdcall __widecharset
{
	WriteConsole(hConsoleOutput, lpBuffer, nNumberOfCharsToWrite, lpNumberOfCharsWritten, lpReserved);
	ReadConsole(hConsoleInput, lpBuffer, nNumberOfCharsToRead, lpNumberOfCharsRead, pInputControl);
	lstrlen(lpString : char*);
}
extern "user32.dll" __widecharset
	wsprintf(lpOutput, lpFmt, args : params);
extern "user32.dll" __stdcall __widecharset
	wvsprintf(lpOutput, lpFmt, arglist);

const int STD_OUTPUT_HANDLE = -11;
const int STD_INPUT_HANDLE  = -10;

var stdout;
var stdin = GetStdHandle(STD_INPUT_HANDLE);

var __stdout_func;

function print(text)
{
	if (__stdout_func == null)
	{
		if (stdout == 0) stdout = GetStdHandle(STD_OUTPUT_HANDLE);
		var length;
		var ctext = cstr(text);
		WriteFile(stdout, ctext, ctext.Length, addrof(length), null);
	}
	else
		__stdout_func(text);
}

function vprintf(format, args)
{
	char buffer[1025];
	wvsprintf(buffer, format, args);
	print(buffer);
}

function vprintfln(format, args)
{
	vprintf(format, args);
	println();
}

function printf(format, args : params)
{
	vprintf(format, args);
}

function println()
{
	print("\r\n");
}

function printfln(format, args : params)
{
	vprintf(format, args);
	println();
}

function pause()
{
	var length;
	byte buffer[16];
	ReadFile(stdin, buffer, 2, addrof(length), null);
}

struct _Finish
{
	// destructor
	function dtor()
	{
		println();
		printfln("Press [Enter] to exit.");
		pause();
	}
}
