<?xml version="1.0" encoding="utf-8" ?>
<llpml version="0.14.20080329">

<!-- 実行時静的束縛 -->

<include src="jit.xml" />
<include src="binary.xml" />

<?llp
struct Delegate : _JIT_Buffer
{
  function WritePush(bw : BinaryWriter, v)
  {
    // push v
    bw.WriteByte(0x68);
    bw.Write(v);
  }
  
  function WriteEpilogue(bw : BinaryWriter, func)
  {
    // mov eax, func
    bw.WriteByte(0xb8);
    bw.Write(func);
    
    // jmp eax
    bw.WriteByte(0xff);
    bw.WriteByte(0xe0);
  }
  
  function set_Delegate(delg : Delegate)
  {
    __jit_free(Ptr);
    if (delg == null)
      Ptr = null;
    else
    {
      Ptr = delg.Ptr;
      delg.Ptr = null;
      delete_Delegate(delg);
    }
    return Ptr;
  }
  
  function Bind(func)
  {
    BinaryWriter bw;
    bw.Init(Ptr, _JIT_Alloc_Size);
    WriteEpilogue(bw, func);
  }
  
  function Bind1(arg1, func)
  {
    BinaryWriter bw;
    bw.Init(Ptr, _JIT_Alloc_Size);
    bw.WriteByte(0x58); // pop eax
    WritePush(bw, arg1);
    bw.WriteByte(0x50); // push eax
    WriteEpilogue(bw, func);
  }
  
  function Bind2(arg1, arg2, func)
  {
    BinaryWriter bw;
    bw.Init(Ptr, _JIT_Alloc_Size);
    bw.WriteByte(0x58); // pop eax
    WritePush(bw, arg2);
    WritePush(bw, arg1);
    bw.WriteByte(0x50); // push eax
    WriteEpilogue(bw, func);
  }
  
  function Bind3(arg1, arg2, arg3, func)
  {
    BinaryWriter bw;
    bw.Init(Ptr, _JIT_Alloc_Size);
    bw.WriteByte(0x58); // pop eax
    WritePush(bw, arg3);
    WritePush(bw, arg2);
    WritePush(bw, arg1);
    bw.WriteByte(0x50); // push eax
    WriteEpilogue(bw, func);
  }
  
  function Bind4(arg1, arg2, arg3, arg4, func)
  {
    BinaryWriter bw;
    bw.Init(Ptr, _JIT_Alloc_Size);
    bw.WriteByte(0x58); // pop eax
    WritePush(bw, arg4);
    WritePush(bw, arg3);
    WritePush(bw, arg2);
    WritePush(bw, arg1);
    bw.WriteByte(0x50); // push eax
    WriteEpilogue(bw, func);
  }
  
  function Bind1Std(arg1, func, argc)
  {
    BinaryWriter bw;
    bw.Init(Ptr, _JIT_Alloc_Size);
    
    int stack = argc * 4;
    if (argc <= 10)
    {
      for (int i = 0; i < argc; i++)
      {
        // push dword [esp+stack]
        bw.WriteByte(0xff);
        bw.WriteByte(0x74);
        bw.WriteByte(0x24);
        bw.WriteByte(stack);
      }
      WritePush(bw, arg1);
      
      // mov eax, func
      bw.WriteByte(0xb8);
      bw.Write(func);
      
      // call eax
      bw.WriteByte(0xff);
      bw.WriteByte(0xd0);
      
      // add esp, (stack + 4)
      bw.WriteByte(0x81);
      bw.WriteByte(0xc4);
      bw.Write(stack + 4);
    }
    
    // ret stack
    bw.WriteByte(0xc2);
    bw.WriteShort(stack);
  }
}

function new_Delegate(arg, func)
{
  var ret = (Delegate)malloc(sizeof Delegate);
  ret.izer();
  ret.ctor();
  ret.Bind1(arg, func);
  return ret;
}

function delete_Delegate(delg : Delegate)
{
  delg.dtor();
  free(delg);
}
?>

</llpml>
