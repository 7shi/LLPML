<?xml version="1.0" encoding="utf-8" ?>
<llpml version="0.9.20080127">

<!-- boolean operation 1 -->

<include src="finish.xml" />

var a = 1, b = 2, c = 1;
printfln("(a, b, c) = (%d, %d, %d)", a, b, c);

// equal

printfln("%d: a == 1", a == 1);
printfln("%d: a == 2", a == 2);
printfln("%d: a == b", a == b);

<call name="printfln">
  "%d: a == b == 1"
  <equal>a, b, 1</equal>
</call>

<call name="printfln">
  "%d: a == c == 1"
  <equal>a, c, 1</equal>
</call>

<call name="printfln">
  "%d: a == c == 2"
  <equal>a, c, 2</equal>
</call>

// not equal

printfln("%d: a != 1", a != 1);
printfln("%d: a != 2", a != 2);
printfln("%d: a != b", a != b);

<call name="printfln">
  "%d: a != b != 1"
  <not-equal>a, b, 1</not-equal>
</call>

<call name="printfln">
  "%d: a != b != 3"
  <not-equal>a, b, 3</not-equal>
</call>

<call name="printfln">
  "%d: a != c != 1"
  <not-equal>a, c, 1</not-equal>
</call>

// or else

printfln(
  "%d: a == 1 || b == 1",
  a == 1 || b == 1);
printfln(
  "%d: a == 1 || b == 2",
  a == 1 || b == 2);
printfln(
  "%d: a == 2 || b == 2",
  a == 2 || b == 2);
printfln(
  "%d: a == 3 || b == 3",
  a == 3 || b == 3);

<?llp
// and also

printfln(
  "%d: a == 1 && b == 1",
  a == 1 && b == 1);
printfln(
  "%d: a == 1 && b == 2",
  a == 1 && b == 2);
printfln(
  "%d: a == 2 && b == 2",
  a == 2 && b == 2);
printfln(
  "%d: a == 3 && b == 3",
  a == 3 && b == 3);

// not

printfln(
  "%d: !(a == 2) && b == 2",
  !(a == 2) && b == 2);
?>

</llpml>
