<?xml version="1.0" encoding="utf-8" ?>
<llpml version="1.0">

<include src="win32.xml" />
<include src="stdio.xml" />
<include src="jit.xml" />
<include src="ArrayList.xml" />

<?llp
var g_hInstance = GetModuleHandle(null);
var g_nAutoID = 0x2000;

function winforms_get_auto_id()
{
  return g_nAutoID++;
}

struct Event : ArrayList
{
  function dtor()
  {
    Clear();
  }
  
  function Clear()
  {
    for (int i = 0; i < Count; i++)
      __jit_free(Ptr[i]);
    Count = 0;
  }
  
  function Add(delg)
  {
    base.Add(__jit_dup(delg));
  }
  
  function Invoke(sender, e)
  {
    for (int i = 0; i < Count; i++)
      Ptr[i](sender, e);
  }
}

struct MainMenu
{
  var hMenu;
  ArrayList MenuItems;
  
  function ctor()
  {
    hMenu = CreateMenu();
  }
  
  function dtor()
  {
    hMenu.DestroyMenu();
  }
  
  function Append(menuItem : MenuItem)
  {
    MenuItems.Add(menuItem);
    menuItem.hMenu = hMenu;
    hMenu.InsertMenuItem(-1, true, menuItem);
  }
  
  function FindMenuItem(id)
  {
    for (int i = 0; i < MenuItems.Count; i++)
    {
      var mi : MenuItem = MenuItems.Ptr[i];
      var ret = mi.FindMenuItem(id);
      if (ret != null) return ret;
    }
    return null;
  }
}

struct MenuItem : MENUITEMINFO
{
  var hMenu = null;
  ArrayList MenuItems;
  Event Click;
  
  function ctor()
  {
    __stosb(this, 0, sizeof MENUITEMINFO);
    cbSize = sizeof MENUITEMINFO;
    fMask  = MIIM_STATE | MIIM_ID;
    fState = MFS_ENABLED;
    wID    = winforms_get_auto_id();
  }
  
  function dtor()
  {
    if (hSubMenu != null)
      hSubMenu.DestroyMenu();
  }
  
  function set_Text(text)
  {
    fMask |= MIIM_STRING;
    dwTypeData = text;
    Refresh();
    return text;
  }
  
  function set_Enabled(enabled)
  {
    if (enabled)
      fState &= ~MFS_DISABLED;
    else
      fState |= MFS_DISABLED;
    Refresh();
    return enabled;
  }
  
  function set_Checked(checked)
  {
    if (checked)
      fState |= MFS_CHECKED;
    else
      fState &= ~MFS_CHECKED;
    Refresh();
    return checked;
  }
  
  function UseRadio()
  {
    fMask |= MIIM_FTYPE;
    fType |= MFT_RADIOCHECK;
    Refresh();
  }
  
  function Append(menuItem : MenuItem)
  {
    MenuItems.Add(menuItem);
    if (hSubMenu == null)
    {
      fMask |= MIIM_SUBMENU;
      hSubMenu = CreatePopupMenu();
    }
    menuItem.hMenu = hSubMenu;
    hSubMenu.InsertMenuItem(-1, true, menuItem);
    Refresh();
  }
  
  function Refresh()
  {
    if (hMenu != null)
      hMenu.SetMenuItemInfo(wID, false, this);
  }
  
  virtual OnClick(e : EventArgs)
  {
    Click.Invoke(this, e);
  }
  
  function FindMenuItem(id)
  {
    if (id == wID) return this;
    for (int i = 0; i < MenuItems.Count; i++)
    {
      var mi : MenuItem = MenuItems.Ptr[i];
      var ret : MenuItem = mi.FindMenuItem(id);
      if (ret != null) return ret;
    }
    return null;
  }
}

struct Control
{
  var dwExStyle     = 0;
  var lpClassName   = null;
  var lpWindowName  = "";
  var dwStyle       = 0;
  var X             = CW_USEDEFAULT;
  var Y             = 0;
  var nWidth        = CW_USEDEFAULT;
  var nHeight       = 0;
  var hWndParent    = null;
  var hMenu         = null;
  var hInstance     = g_hInstance;
  var lpParam       = null;
  var hWnd          = null;
  
  function dtor()
  {
    Close();
  }
  
  virtual Create()
  {
    if (hWnd != null) return;
    hWnd = CreateWindowEx(
      dwExStyle, lpClassName, lpWindowName,
      dwStyle, X, Y, nWidth, nHeight,
      hWndParent, hMenu, hInstance, lpParam);
  }
  
  function Show()
  {
    if (hWnd == null) Create();
    hWnd.ShowWindow(SW_SHOWNORMAL);
    hWnd.UpdateWindow();
  }
  
  function Hide()
  {
    if (hWnd == null) Create();
    hWnd.ShowWindow(SW_HIDE);
  }
  
  function Close()
  {
    if (hWnd == null) return;
    hWnd.DestroyWindow();
  }
  
  function Invalidate()
  {
    if (hWnd == null) Create();
    hWnd.InvalidateRect(null, false);
  }
  
  function set_Text(text)
  {
    lpWindowName = text;
    return text;
  }
  
  virtual OnPaint(e : PaintEventArgs) { }
  virtual OnMouseDown(e : MouseEventArgs) { }
  virtual OnMouseUp(e : MouseEventArgs) { }
  virtual OnClosed(e : EventArgs) { }
  
  virtual WndProc(hWnd, uMsg, wParam, lParam)
  {
    switch (uMsg)
    {
      case WM_PAINT:
      {
        PaintEventArgs e;
        e.hDC = hWnd.BeginPaint(e.ps);
        OnPaint(e);
        hWnd.EndPaint(e.ps);
        return 0;
      }
      case WM_LBUTTONDOWN:
      case WM_RBUTTONDOWN:
      case WM_MBUTTONDOWN:
      {
        MouseEventArgs e;
        e.Init(uMsg, lParam);
        OnMouseDown(e);
        return 0;
      }
      case WM_LBUTTONUP:
      case WM_RBUTTONUP:
      case WM_MBUTTONUP:
      {
        MouseEventArgs e;
        e.Init(uMsg, lParam);
        OnMouseUp(e);
        return 0;
      }
      case WM_DESTROY:
        OnClosed(null);
        return 0;
    }
    return hWnd.DefWindowProc(uMsg, wParam, lParam);
  }
}

struct Form : Control
{
  WNDCLASSEX wcex;
  delegate wndProc;
  char className[1025];
  var mainMenu : MainMenu = null;
  
  function ctor()
  {
    wndProc = delegate((stdcall))(this, WndProc);
    className.wsprintf("WinWrap_%x", winforms_get_auto_id());
    lpClassName = className;
    dwStyle     = WS_OVERLAPPEDWINDOW;
    
    __stosb(wcex, 0, sizeof WNDCLASSEX);
    wcex.cbSize        = sizeof WNDCLASSEX;
    wcex.style         = CS_VREDRAW | CS_HREDRAW;
    wcex.lpfnWndProc   = wndProc;
    wcex.hInstance     = g_hInstance;
    wcex.hCursor       = LoadCursor(null, IDC_ARROW);
    wcex.hbrBackground = COLOR_WINDOW + 1;
    wcex.lpszClassName = className;
  }
  
  override Create()
  {
    if (hWnd != null) return;
    wcex.RegisterClassEx();
    base.Create();
  }
  
  override OnClosed(e : EventArgs)
  {
    Application.Exit();
  }
  
  override WndProc(hWnd, uMsg, wParam, lParam)
  {
    switch (uMsg)
    {
      case WM_COMMAND:
        if (mainMenu != null)
        {
          var mi : MenuItem = mainMenu.FindMenuItem(LOWORD(wParam));
          if (mi != null) mi.OnClick(null);
        }
        return 0;
    }
    return base.WndProc(hWnd, uMsg, wParam, lParam);
  }
}

struct EventArgs {}

struct PaintEventArgs : EventArgs
{
  PAINTSTRUCT ps;
  var hDC;
}

struct MouseEventArgs : EventArgs
{
  int Button, X, Y;
  
  function Init(uMsg, lParam)
  {
    switch (uMsg)
    {
      case WM_LBUTTONDOWN:
      case WM_LBUTTONUP:
      case WM_LBUTTONDBLCLK:
        Button = MK_LBUTTON;
        break;
      case WM_RBUTTONDOWN:
      case WM_RBUTTONUP:
      case WM_RBUTTONDBLCLK:
        Button = MK_RBUTTON;
        break;
      case WM_MBUTTONDOWN:
      case WM_MBUTTONUP:
      case WM_MBUTTONDBLCLK:
        Button = MK_MBUTTON;
        break;
    }
    X = GET_X_LPARAM(lParam);
    Y = GET_Y_LPARAM(lParam);
  }
}

struct Application
{
  static function Run()
  {
    MSG uMsg;
    while (uMsg.GetMessage(null, 0, 0))
    {
      uMsg.TranslateMessage();
      uMsg.DispatchMessage();
    }
  }

  static bool alive = true;

  static function DoEvents()
  {
    MSG uMsg;
    while (alive && uMsg.PeekMessage(null, 0, 0, PM_REMOVE))
    {
      uMsg.TranslateMessage();
      uMsg.DispatchMessage();
    }
    return alive;
  }

  static function Exit()
  {
    alive = false;
    PostQuitMessage(0);
  }
}
?>

</llpml>
