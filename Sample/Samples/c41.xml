<?xml version="1.0" encoding="utf-8" ?>
<llpml version="0.21.20080817">

<title>関数の戻り値の型</title>

<include src="finish.xml" />
<include src="malloc.xml" />

<?llp
struct Point
{
  int x, y;

  function Show()
  {
    printfln("x = %d, y = %d", x, y);
  }
}

// 関数の戻り値の型を明示的に指定
function new_Point1(x, y) : Point
{
  var ret = malloc(sizeof Point);
  ((Point)ret).x = x;
  ((Point)ret).y = y;
  return ret;
}

// 関数の戻り値の型指定を省略
// 型推論によりretの型が戻り値の型になる
function new_Point2(x, y)
{
  var ret = (Point)malloc(sizeof Point);
  ret.x = x;
  ret.y = y;
  return ret;
}

// 型推論によりp1, p2はPoint型の参照になる
var p1 = new_Point1(1, 2);
var p2 = new_Point2(3, 4);

// p1, p2の型付けを確認（静的バインド）
printfln("typeof p1 = %s", typeof p1);
printfln("typeof p2 = %s", typeof p2);

// メンバ関数の呼び出しには型付けが必要
p1.Show();
p2.Show();

// ヒープにある構造体にはGCが働かない
free(p1);
free(p2);
?>

</llpml>
