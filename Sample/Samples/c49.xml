<?xml version="1.0" encoding="utf-8" ?>
<llpml version="1.0">

<title>クラスと参照カウント</title>

<include src="finish.xml" />
<include src="GCList.xml" />

<?llp
class Test1
{
  function ctor
  {
    printfln("%p: %s", this, __FUNCTION__);
  }

  function dtor
  {
    printfln("%p: %s", this, __FUNCTION__);
  }
}

class Test2 : Test1
{
  function ctor
  {
    printfln("%p: %s", this, __FUNCTION__);
  }

  function dtor
  {
    printfln("%p: %s", this, __FUNCTION__);
  }
}

printfln("* new Test1");
var t = new Test1;
printfln("typeof t = %s", typeof(t).Name);
t = new Test2;
printfln("typeof t = %s", typeof(t).Name);
printfln("__get_refcount(%p) = %d", t, __get_refcount(t));
new Test1;
t = null;
println();

printfln("* new Test2");
t = new Test2;
printfln("typeof t = %s", typeof(t).Name);
new Test2;
t = null;
println();

printfln("* new Test1[3]");
var tt : Test1[] = new Test1[3];
printfln("tt.Length = %d", tt.Length);
printfln("typeof tt = %s", typeof(tt).Name);
tt[1] = new Test2;
for (int i = 0; i < tt.Length; i++)
{
  var typeName = "(NULL)";
  var type = typeof(tt[i]);
  if (type != null) typeName = type.Name;
  printfln("tt[%d] = %p : %s", i, tt[i], typeName);
}
printfln("__get_refcount(%p) = %d", tt, __get_refcount(tt));
function len(a : Test1[]) { return a.Length; }
printfln("len(tt) = %d", len(tt));
tt = null;
println();

printfln("* GCList");
var list = new GCList;
list.Add(new Test1);
list.Add(new Test2);
list = null;
println();

function newTest1
{
  return new Test1;
}

printfln("* argument");
printfln("__get_refcount(new Test1) = %d", __get_refcount(new Test1));
printfln("__get_refcount(newTest1()) = %d", __get_refcount(newTest1()));
println();

printfln("* return value");
t = newTest1();
printfln("__get_refcount(%p) = %d", t, __get_refcount(t));
newTest1();
t = null;
?>

</llpml>
