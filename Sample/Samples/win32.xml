<?xml version="1.0" encoding="utf-8" ?>
<llpml version="0.10.20080203">

<extern module="kernel32.dll" type="std" name="Sleep" />
<extern module="kernel32.dll" type="std" suffix="W" name="GetModuleHandle" />
<extern module="user32.dll" type="std" name="ShowWindow" />
<extern module="user32.dll" type="std" name="UpdateWindow" />
<extern module="user32.dll" type="std" name="DestroyWindow" />
<extern module="user32.dll" type="std" name="TranslateMessage" />
<extern module="user32.dll" type="std" name="PostQuitMessage" />
<extern module="user32.dll" type="std" name="BeginPaint" />
<extern module="user32.dll" type="std" name="EndPaint" />
<extern module="user32.dll" type="std" name="GetDC" />
<extern module="user32.dll" type="std" name="GetSysColorBrush" />
<extern module="user32.dll" type="std" name="InvalidateRect" />
<extern module="user32.dll" type="std" name="FillRect" />
<extern module="user32.dll" type="std" suffix="W" name="DefWindowProc" />
<extern module="user32.dll" type="std" suffix="W" name="LoadCursor" />
<extern module="user32.dll" type="std" suffix="W" name="RegisterClassEx" />
<extern module="user32.dll" type="std" suffix="W" name="CreateWindowEx" />
<extern module="user32.dll" type="std" suffix="W" name="GetMessage" />
<extern module="user32.dll" type="std" suffix="W" name="DispatchMessage" />
<extern module="gdi32.dll" type="std" suffix="W" name="TextOut" />

<?llpml
const int CS_VREDRAW     = 1;
const int CS_HREDRAW     = 2;
const int COLOR_WINDOW   = 5;
const int IDC_ARROW      = 32512;
const int CW_USEDEFAULT  = 0x80000000;
const int WS_OVERLAPPED  = 0;
const int WS_CAPTION     = 0xc00000;
const int WS_SYSMENU     = 0x80000;
const int WS_THICKFRAME  = 0x40000;
const int WS_MINIMIZEBOX = 0x20000;
const int WS_MAXIMIZEBOX = 0x10000;
var WS_OVERLAPPEDWINDOW =
  WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU |
  WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX;
const int SW_SHOWNORMAL = 1;
const int COLOR_WINDOWTEXT = 8;

const int MK_LBUTTON  = 0x01;
const int MK_RBUTTON  = 0x02;
const int MK_SHIFT    = 0x04;
const int MK_CONTROL  = 0x08;
const int MK_MBUTTON  = 0x10;
const int MK_XBUTTON1 = 0x20;
const int MK_XBUTTON2 = 0x40;

const int WM_DESTROY       = 0x002;
const int WM_PAINT         = 0x00f;
const int WM_MOUSEFIRST    = 0x200;
const int WM_MOUSEMOVE     = 0x200;
const int WM_LBUTTONDOWN   = 0x201;
const int WM_LBUTTONUP     = 0x202;
const int WM_LBUTTONDBLCLK = 0x203;
const int WM_RBUTTONDOWN   = 0x204;
const int WM_RBUTTONUP     = 0x205;
const int WM_RBUTTONDBLCLK = 0x206;
const int WM_MBUTTONDOWN   = 0x207;
const int WM_MBUTTONUP     = 0x208;
const int WM_MBUTTONDBLCLK = 0x209;
const int WM_MOUSEWHEEL    = 0x20a;
const int WM_XBUTTONDOWN   = 0x20b;
const int WM_XBUTTONUP     = 0x20c;
const int WM_XBUTTONDBLCLK = 0x20e;
const int WM_MOUSELAST     = 0x20e;

struct WNDCLASSEX
{
  var cbSize;
  var style;
  var lpfnWndProc;
  var cbClsExtra;
  var cbWndExtra;
  var hInstance;
  var hIcon;
  var hCursor;
  var hbrBackground;
  var lpszMenuName;
  var lpszClassName;
  var hIconSm;
}

struct POINT
{
  var x, y;
}

struct RECT
{
  var left, top, right, bottom;
}

struct MSG
{
  var hwnd;
  var message;
  var wParam;
  var lParam;
  var time;
  POINT pt;
}

struct PAINTSTRUCT
{
  var hdc;
  var fErase;
  RECT rcPaint;
  var fRestore;
  var fIncUpdate;
  byte rgbReserved[32];
}

function LOWORD(l)
{
  return l & 0xffff;
}

function HIWORD(l)
{
  return (l >> 16) & 0xffff;
}

function GET_X_LPARAM(l)
{
  return l & 0xffff;
}

function GET_Y_LPARAM(l)
{
  return (l >> 16) & 0xffff;
}
?>

</llpml>
